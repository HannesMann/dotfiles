From 93efc4be404c3e4a2203b4dbb214509dd85b266f Mon Sep 17 00:00:00 2001
From: Hannes Mann <hannesmann2000@gmail.com>
Date: Sun, 25 Feb 2024 03:11:50 +0100
Subject: [PATCH 1/1] modesetting: Enable framebuffer modifiers for non-atomic

---
 hw/xfree86/drivers/modesetting/driver.c        | 10 ++++++++++
 hw/xfree86/drivers/modesetting/driver.h        |  1 +
 .../drivers/modesetting/drmmode_display.c      | 18 ++++++++++++++++++
 3 files changed, 29 insertions(+)

diff --git a/hw/xfree86/drivers/modesetting/driver.c b/hw/xfree86/drivers/modesetting/driver.c
index cf2d4cfe4..8b10e92e2 100644
--- a/hw/xfree86/drivers/modesetting/driver.c
+++ b/hw/xfree86/drivers/modesetting/driver.c
@@ -1445,6 +1445,16 @@ PreInit(ScrnInfoPtr pScrn, int flags)
         }
     }
 
+    /*
+     * Universal planes are implied if atomic modesetting is supported. If
+     * atomic modesetting is not supported, try to at least enable universal
+     * planes so we can make use of framebuffer modifiers.
+     */
+    if (!ms->atomic_modeset) {
+        ret = drmSetClientCap(ms->fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1);
+        ms->kms_has_universal_planes = ret == 0;
+    }
+
     ms->kms_has_modifiers = FALSE;
     ret = drmGetCap(ms->fd, DRM_CAP_ADDFB2_MODIFIERS, &value);
     if (ret == 0 && value != 0)
diff --git a/hw/xfree86/drivers/modesetting/driver.h b/hw/xfree86/drivers/modesetting/driver.h
index 74630cac4..5398f70a2 100644
--- a/hw/xfree86/drivers/modesetting/driver.h
+++ b/hw/xfree86/drivers/modesetting/driver.h
@@ -135,6 +135,7 @@ typedef struct _modesettingRec {
     Bool has_queue_sequence;
     Bool tried_queue_sequence;
 
+    Bool kms_has_universal_planes;
     Bool kms_has_modifiers;
 
     /* VRR support */
diff --git a/hw/xfree86/drivers/modesetting/drmmode_display.c b/hw/xfree86/drivers/modesetting/drmmode_display.c
index 5c8b47b53..fa7f2798f 100644
--- a/hw/xfree86/drivers/modesetting/drmmode_display.c
+++ b/hw/xfree86/drivers/modesetting/drmmode_display.c
@@ -1088,6 +1088,24 @@ drmmode_bo_import(drmmode_ptr drmmode, drmmode_bo *bo,
                 handles[i] = gbm_bo_get_handle_for_plane(bo->gbm, i).u32;
                 strides[i] = gbm_bo_get_stride_for_plane(bo->gbm, i);
                 offsets[i] = gbm_bo_get_offset(bo->gbm, i);
+                /*
+                 * Note that this is actually a neat feature. Even if no
+                 * framebuffer modifiers were used during the framebuffer
+                 * allocation, this may return a !DRM_FORMAT_MOD_LINEAR
+                 * modifier if the DRI driver decides to choose one. It's
+                 * not recommended to do so, but if it is guaranteed that
+                 * the display and GPU both support this modifier, they
+                 * can both use this modifier rather than the pitch-linear
+                 * modifier as a lowest common denominator.
+                 *
+                 * DRI drivers are still recommended to allocate buffers in
+                 * pitch-linear format if no framebuffer modifiers are used
+                 * because applications are assumed to not know about these
+                 * modifiers at all if they allocate buffers the old way.
+                 * In that case they must be assumed to use drmModeAddFB(),
+                 * which doesn't allow specifying any framebuffer modifiers
+                 * and therefore DRM_FORMAT_MOD_LINEAR is implied.
+                 */
                 modifiers[i] = gbm_bo_get_modifier(bo->gbm);
             }
 
-- 
2.44.0

