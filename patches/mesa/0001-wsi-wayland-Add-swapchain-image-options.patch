From ebd91655454ea93cbe040a2ce97337247ce0103e Mon Sep 17 00:00:00 2001
From: Hannes Mann <hannesmann2000@gmail.com>
Date: Fri, 19 May 2023 02:39:25 +0200
Subject: [PATCH 1/3] wsi/wayland: Add swapchain image options

---
 src/amd/vulkan/radv_instance.c      |  3 ++
 src/intel/vulkan/anv_device.c       |  2 ++
 src/intel/vulkan_hasvk/anv_device.c |  2 ++
 src/util/driconf.h                  | 14 +++++++-
 src/virtio/vulkan/vn_instance.c     |  3 ++
 src/vulkan/wsi/wsi_common.c         |  2 +-
 src/vulkan/wsi/wsi_common.h         | 16 +++++++++
 src/vulkan/wsi/wsi_common_private.h |  3 +-
 src/vulkan/wsi/wsi_common_wayland.c | 52 +++++++++++++++++++++++------
 9 files changed, 83 insertions(+), 14 deletions(-)

diff --git a/src/amd/vulkan/radv_instance.c b/src/amd/vulkan/radv_instance.c
index f1e23ee1a6a..1a91ff94df9 100644
--- a/src/amd/vulkan/radv_instance.c
+++ b/src/amd/vulkan/radv_instance.c
@@ -117,6 +117,9 @@ static const driOptionDescription radv_dri_options[] = {
       DRI_CONF_VK_X11_OVERRIDE_MIN_IMAGE_COUNT(0)
       DRI_CONF_VK_X11_STRICT_IMAGE_COUNT(false)
       DRI_CONF_VK_X11_ENSURE_MIN_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_OVERRIDE_MIN_IMAGE_COUNT(0)
+      DRI_CONF_VK_WAYLAND_STRICT_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_ENSURE_MIN_IMAGE_COUNT(false)
       DRI_CONF_VK_KHR_PRESENT_WAIT(false)
       DRI_CONF_VK_XWAYLAND_WAIT_READY(true)
       DRI_CONF_RADV_REPORT_LLVM9_VERSION_STRING(false)
diff --git a/src/intel/vulkan/anv_device.c b/src/intel/vulkan/anv_device.c
index 8dc7bead42f..0b89ce0fa63 100644
--- a/src/intel/vulkan/anv_device.c
+++ b/src/intel/vulkan/anv_device.c
@@ -69,6 +69,8 @@ static const driOptionDescription anv_dri_options[] = {
       DRI_CONF_ADAPTIVE_SYNC(true)
       DRI_CONF_VK_X11_OVERRIDE_MIN_IMAGE_COUNT(0)
       DRI_CONF_VK_X11_STRICT_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_OVERRIDE_MIN_IMAGE_COUNT(0)
+      DRI_CONF_VK_WAYLAND_STRICT_IMAGE_COUNT(false)
       DRI_CONF_VK_KHR_PRESENT_WAIT(false)
       DRI_CONF_VK_XWAYLAND_WAIT_READY(true)
       DRI_CONF_ANV_ASSUME_FULL_SUBGROUPS(false)
diff --git a/src/intel/vulkan_hasvk/anv_device.c b/src/intel/vulkan_hasvk/anv_device.c
index af4d759a2aa..e7810eec7b5 100644
--- a/src/intel/vulkan_hasvk/anv_device.c
+++ b/src/intel/vulkan_hasvk/anv_device.c
@@ -66,6 +66,8 @@ static const driOptionDescription anv_dri_options[] = {
       DRI_CONF_ADAPTIVE_SYNC(true)
       DRI_CONF_VK_X11_OVERRIDE_MIN_IMAGE_COUNT(0)
       DRI_CONF_VK_X11_STRICT_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_OVERRIDE_MIN_IMAGE_COUNT(0)
+      DRI_CONF_VK_WAYLAND_STRICT_IMAGE_COUNT(false)
       DRI_CONF_VK_XWAYLAND_WAIT_READY(true)
       DRI_CONF_ANV_ASSUME_FULL_SUBGROUPS(false)
       DRI_CONF_ANV_SAMPLE_MASK_OUT_OPENGL_BEHAVIOUR(false)
diff --git a/src/util/driconf.h b/src/util/driconf.h
index d1a000e2d77..6a0ef20b28b 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -382,7 +382,7 @@
 
 #define DRI_CONF_VK_X11_OVERRIDE_MIN_IMAGE_COUNT(def) \
    DRI_CONF_OPT_I(vk_x11_override_min_image_count, def, 0, 999, \
-                  "Override the VkSurfaceCapabilitiesKHR::minImageCount (0 = no override)")
+                  "Override the VkSurfaceCapabilitiesKHR::minImageCount on X11 WSI (0 = no override)")
 
 #define DRI_CONF_VK_X11_STRICT_IMAGE_COUNT(def) \
    DRI_CONF_OPT_B(vk_x11_strict_image_count, def, \
@@ -392,6 +392,18 @@
    DRI_CONF_OPT_B(vk_x11_ensure_min_image_count, def, \
                   "Force the X11 WSI to create at least the number of image specified by the driver in VkSurfaceCapabilitiesKHR::minImageCount")
 
+#define DRI_CONF_VK_WAYLAND_OVERRIDE_MIN_IMAGE_COUNT(def) \
+   DRI_CONF_OPT_I(vk_wayland_override_min_image_count, def, 0, 999, \
+                  "Override the VkSurfaceCapabilitiesKHR::minImageCount on Wayland WSI (0 = no override)")
+
+#define DRI_CONF_VK_WAYLAND_STRICT_IMAGE_COUNT(def) \
+   DRI_CONF_OPT_B(vk_wayland_strict_image_count, def, \
+                  "Force the Wayland WSI to create exactly the number of image specified by the application in VkSwapchainCreateInfoKHR::minImageCount")
+
+#define DRI_CONF_VK_WAYLAND_ENSURE_MIN_IMAGE_COUNT(def) \
+   DRI_CONF_OPT_B(vk_wayland_ensure_min_image_count, def, \
+                  "Force the Wayland WSI to create at least the number of image specified by the driver in VkSurfaceCapabilitiesKHR::minImageCount")
+
 #define DRI_CONF_VK_KHR_PRESENT_WAIT(def) \
    DRI_CONF_OPT_B(vk_khr_present_wait, def, \
                   "Expose VK_KHR_present_wait and id extensions despite them not being implemented for all supported surface types")
diff --git a/src/virtio/vulkan/vn_instance.c b/src/virtio/vulkan/vn_instance.c
index 233a2614132..2f8ff7068ea 100644
--- a/src/virtio/vulkan/vn_instance.c
+++ b/src/virtio/vulkan/vn_instance.c
@@ -58,6 +58,9 @@ static const driOptionDescription vn_dri_options[] = {
       DRI_CONF_VK_X11_ENSURE_MIN_IMAGE_COUNT(false)
       DRI_CONF_VK_X11_OVERRIDE_MIN_IMAGE_COUNT(0)
       DRI_CONF_VK_X11_STRICT_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_ENSURE_MIN_IMAGE_COUNT(false)
+      DRI_CONF_VK_WAYLAND_OVERRIDE_MIN_IMAGE_COUNT(0)
+      DRI_CONF_VK_WAYLAND_STRICT_IMAGE_COUNT(false)
       DRI_CONF_VK_XWAYLAND_WAIT_READY(true)
       DRI_CONF_VENUS_IMPLICIT_FENCING(false)
    DRI_CONF_SECTION_END
diff --git a/src/vulkan/wsi/wsi_common.c b/src/vulkan/wsi/wsi_common.c
index b03a3590188..3035c62a64d 100644
--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -190,7 +190,7 @@ wsi_device_init(struct wsi_device *wsi,
 #endif
 
 #ifdef VK_USE_PLATFORM_WAYLAND_KHR
-   result = wsi_wl_init_wsi(wsi, alloc, pdevice);
+   result = wsi_wl_init_wsi(wsi, alloc, pdevice, dri_options);
    if (result != VK_SUCCESS)
       goto fail;
 #endif
diff --git a/src/vulkan/wsi/wsi_common.h b/src/vulkan/wsi/wsi_common.h
index 346025602b9..dce946a18b7 100644
--- a/src/vulkan/wsi/wsi_common.h
+++ b/src/vulkan/wsi/wsi_common.h
@@ -158,6 +158,22 @@ struct wsi_device {
       bool extra_xwayland_image;
    } x11;
 
+   struct {
+      /* Override the minimum number of images on the swapchain.
+       * 0 = no override */
+      uint32_t override_minImageCount;
+
+      /* Forces strict number of image on the swapchain using application
+       * provided VkSwapchainCreateInfoKH::RminImageCount.
+       */
+      bool strict_imageCount;
+
+      /* Ensures to create at least the number of image specified by the
+       * driver in VkSurfaceCapabilitiesKHR::minImageCount.
+       */
+      bool ensure_minImageCount;
+   } wayland;
+
    struct {
       void *(*get_d3d12_command_queue)(VkDevice device);
       /* Needs to be per VkDevice, not VkPhysicalDevice, depends on queue config */
diff --git a/src/vulkan/wsi/wsi_common_private.h b/src/vulkan/wsi/wsi_common_private.h
index fd4d8482288..1f08765316c 100644
--- a/src/vulkan/wsi/wsi_common_private.h
+++ b/src/vulkan/wsi/wsi_common_private.h
@@ -360,7 +360,8 @@ void wsi_x11_finish_wsi(struct wsi_device *wsi_device,
                         const VkAllocationCallbacks *alloc);
 VkResult wsi_wl_init_wsi(struct wsi_device *wsi_device,
                          const VkAllocationCallbacks *alloc,
-                         VkPhysicalDevice physical_device);
+                         VkPhysicalDevice physical_device,
+                         const struct driOptionCache *dri_options);
 void wsi_wl_finish_wsi(struct wsi_device *wsi_device,
                        const VkAllocationCallbacks *alloc);
 VkResult wsi_win32_init_wsi(struct wsi_device *wsi_device,
diff --git a/src/vulkan/wsi/wsi_common_wayland.c b/src/vulkan/wsi/wsi_common_wayland.c
index c6f70f458ce..0e2927df417 100644
--- a/src/vulkan/wsi/wsi_common_wayland.c
+++ b/src/vulkan/wsi/wsi_common_wayland.c
@@ -52,6 +52,7 @@
 #include <util/u_dynarray.h>
 #include <util/anon_file.h>
 #include <util/os_time.h>
+#include <util/xmlconfig.h>
 
 #ifdef MAJOR_IN_MKDEV
 #include <sys/mkdev.h>
@@ -1015,8 +1016,11 @@ static const VkPresentModeKHR present_modes[] = {
 };
 
 static uint32_t
-wsi_wl_surface_get_min_image_count(const VkSurfacePresentModeEXT *present_mode)
+wsi_wl_surface_get_min_image_count(const struct wsi_device *wsi_device, const VkSurfacePresentModeEXT *present_mode)
 {
+   if (wsi_device->wayland.override_minImageCount)
+      return wsi_device->wayland.override_minImageCount;
+
    if (present_mode && (present_mode->presentMode == VK_PRESENT_MODE_FIFO_KHR ||
                         present_mode->presentMode == VK_PRESENT_MODE_FIFO_RELAXED_KHR)) {
       /* If we receive a FIFO present mode, only 2 images is required for forward progress.
@@ -1025,23 +1029,22 @@ wsi_wl_surface_get_min_image_count(const VkSurfacePresentModeEXT *present_mode)
        * Other ICDs expose 2 images here already. */
        return 2;
    } else {
-      /* For true mailbox mode, we need at least 4 images:
+      /* For true mailbox mode, we need at least 3 images:
        *  1) One to scan out from
        *  2) One to have queued for scan-out
-       *  3) One to be currently held by the Wayland compositor
-       *  4) One to render to
+       *  3) One to render to
        */
-      return 4;
+      return 3;
    }
 }
 
 static uint32_t
-wsi_wl_surface_get_min_image_count_for_mode_group(const VkSwapchainPresentModesCreateInfoEXT *modes)
+wsi_wl_surface_get_min_image_count_for_mode_group(const struct wsi_device *wsi_device, const VkSwapchainPresentModesCreateInfoEXT *modes)
 {
    /* If we don't provide the PresentModeCreateInfo struct, we must be backwards compatible,
-    * and assume that minImageCount is the default one, i.e. 4, which supports both FIFO and MAILBOX. */
+    * and assume that minImageCount is the default one, i.e. 3, which supports both FIFO and MAILBOX. */
    if (!modes) {
-      return wsi_wl_surface_get_min_image_count(NULL);
+      return wsi_wl_surface_get_min_image_count(wsi_device, NULL);
    }
 
    uint32_t max_required = 0;
@@ -1051,7 +1054,7 @@ wsi_wl_surface_get_min_image_count_for_mode_group(const VkSwapchainPresentModesC
          NULL,
          modes->pPresentModes[i]
       };
-      max_required = MAX2(max_required, wsi_wl_surface_get_min_image_count(&mode));
+      max_required = MAX2(max_required, wsi_wl_surface_get_min_image_count(wsi_device, &mode));
    }
 
    return max_required;
@@ -1063,7 +1066,7 @@ wsi_wl_surface_get_capabilities(VkIcdSurfaceBase *surface,
                                 const VkSurfacePresentModeEXT *present_mode,
                                 VkSurfaceCapabilitiesKHR* caps)
 {
-   caps->minImageCount = wsi_wl_surface_get_min_image_count(present_mode);
+   caps->minImageCount = wsi_wl_surface_get_min_image_count(wsi_device, present_mode);
    /* There is no real maximum */
    caps->maxImageCount = 0;
 
@@ -2200,6 +2203,17 @@ wsi_wl_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
    assert(pCreateInfo->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR);
 
    int num_images = pCreateInfo->minImageCount;
+   if (wsi_device->wayland.strict_imageCount)
+      num_images = pCreateInfo->minImageCount;
+   else if (wsi_device->wayland.ensure_minImageCount) {
+      const VkSurfacePresentModeEXT presentMode = {
+         .sType = VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT,
+         .pNext = NULL,
+         .presentMode = pCreateInfo->presentMode
+      };
+
+      num_images = MAX2(num_images, wsi_wl_surface_get_min_image_count(wsi_device, &presentMode));
+   }
 
    size_t size = sizeof(*chain) + num_images * sizeof(chain->images[0]);
    chain = vk_zalloc(pAllocator, size, 8, VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
@@ -2349,7 +2363,8 @@ fail:
 VkResult
 wsi_wl_init_wsi(struct wsi_device *wsi_device,
                 const VkAllocationCallbacks *alloc,
-                VkPhysicalDevice physical_device)
+                VkPhysicalDevice physical_device,
+                const struct driOptionCache *dri_options)
 {
    struct wsi_wayland *wsi;
    VkResult result;
@@ -2365,6 +2380,21 @@ wsi_wl_init_wsi(struct wsi_device *wsi_device,
    wsi->alloc = alloc;
    wsi->wsi = wsi_device;
 
+   if (dri_options) {
+      if (driCheckOption(dri_options, "vk_wayland_override_min_image_count", DRI_INT)) {
+         wsi_device->wayland.override_minImageCount =
+            driQueryOptioni(dri_options, "vk_wayland_override_min_image_count");
+      }
+      if (driCheckOption(dri_options, "vk_wayland_strict_image_count", DRI_BOOL)) {
+         wsi_device->wayland.strict_imageCount =
+            driQueryOptionb(dri_options, "vk_wayland_strict_image_count");
+      }
+      if (driCheckOption(dri_options, "vk_wayland_ensure_min_image_count", DRI_BOOL)) {
+         wsi_device->wayland.ensure_minImageCount =
+            driQueryOptionb(dri_options, "vk_wayland_ensure_min_image_count");
+      }
+   }
+
    wsi->base.get_support = wsi_wl_surface_get_support;
    wsi->base.get_capabilities2 = wsi_wl_surface_get_capabilities2;
    wsi->base.get_formats = wsi_wl_surface_get_formats;
-- 
2.40.1

