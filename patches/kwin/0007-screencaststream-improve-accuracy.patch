From aabac800d1a678df5388900c6b012a48a460b189 Mon Sep 17 00:00:00 2001
From: Hannes Mann <hannesmann2000@gmail.com>
Date: Mon, 26 Feb 2024 20:02:57 +0100
Subject: [PATCH 07/12] screencaststream: improve accuracy

---
 src/plugins/screencast/screencaststream.cpp | 21 +++++++++++++++------
 src/plugins/screencast/screencaststream.h   |  2 +-
 2 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/src/plugins/screencast/screencaststream.cpp b/src/plugins/screencast/screencaststream.cpp
index 5976e0c8fb..294ae19260 100644
--- a/src/plugins/screencast/screencaststream.cpp
+++ b/src/plugins/screencast/screencaststream.cpp
@@ -313,6 +313,8 @@ ScreenCastStream::ScreenCastStream(ScreenCastSource *source, std::shared_ptr<Pip
     , m_source(source)
     , m_resolution(source->textureSize())
 {
+    m_lastSent = std::chrono::steady_clock::now();
+
     connect(source, &ScreenCastSource::closed, this, [this] {
         m_streaming = false;
         Q_EMIT stopStreaming();
@@ -463,13 +465,20 @@ void ScreenCastStream::recordFrame(const QRegion &_damagedRegion)
         return;
     }
 
-    if (m_videoFormat.max_framerate.num != 0 && !m_lastSent.isNull()) {
-        auto frameInterval = (1000. * m_videoFormat.max_framerate.denom / m_videoFormat.max_framerate.num);
-        auto lastSentAgo = m_lastSent.msecsTo(QDateTime::currentDateTimeUtc());
-        if (lastSentAgo < frameInterval) {
+    if (m_videoFormat.max_framerate.num != 0) {
+        double frameInterval = (250.0 * (double)m_videoFormat.max_framerate.denom / (double)m_videoFormat.max_framerate.num);
+        std::chrono::duration<double> lastSentAgo = std::chrono::steady_clock::now() - m_lastSent;
+        double lastSentAgoMsec = lastSentAgo.count() * 1000.0;
+        if (lastSentAgoMsec < frameInterval) {
             m_pendingDamages += damagedRegion;
             if (!m_pendingFrame.isActive()) {
-                m_pendingFrame.start(frameInterval - lastSentAgo);
+                // Workaround: Send as close as possible within bounds of QTimer
+                int timeout = std::round(frameInterval - lastSentAgoMsec);
+                // Workaround: We don't want to send pending damages immediately
+                if (timeout == 0) {
+                    timeout = 1;
+                }
+                m_pendingFrame.start(timeout);
             }
             return;
         }
@@ -735,7 +744,7 @@ void ScreenCastStream::enqueue()
     pw_stream_queue_buffer(m_pwStream, m_pendingBuffer);
 
     if (m_pendingBuffer->buffer->datas[0].chunk->flags != SPA_CHUNK_FLAG_CORRUPTED) {
-        m_lastSent = QDateTime::currentDateTimeUtc();
+        m_lastSent = std::chrono::steady_clock::now();
     }
 
     m_pendingBuffer = nullptr;
diff --git a/src/plugins/screencast/screencaststream.h b/src/plugins/screencast/screencaststream.h
index 74b6b4630c..2dc6e752ac 100644
--- a/src/plugins/screencast/screencaststream.h
+++ b/src/plugins/screencast/screencaststream.h
@@ -145,7 +145,7 @@ private:
     bool m_waitForNewBuffers = false;
     quint32 m_drmFormat = 0;
 
-    QDateTime m_lastSent;
+    std::chrono::time_point<std::chrono::steady_clock> m_lastSent;
     QRegion m_pendingDamages;
     QTimer m_pendingFrame;
 };
-- 
2.44.0

