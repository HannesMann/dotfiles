From da6c8212fcce9b662dc1972a05b7beb704b26d54 Mon Sep 17 00:00:00 2001
From: Hannes Mann <hannesmann2000@gmail.com>
Date: Sun, 10 Sep 2023 02:00:42 +0200
Subject: [PATCH 1/3] libobs-opengl: Use EGL_IMG_context_priority

---
 UI/cmake/legacy.cmake             |  4 ++++
 UI/cmake/os-linux.cmake           |  2 +-
 UI/window-basic-main.cpp          | 23 +++++++++++++++++++++++
 deps/glad/include/glad/glad_egl.h | 14 +++++++++++---
 deps/glad/src/glad_egl.c          |  7 ++++---
 libobs-opengl/gl-wayland-egl.c    | 14 ++++++++++++++
 libobs-opengl/gl-x11-egl.c        | 12 ++++++++++++
 7 files changed, 69 insertions(+), 7 deletions(-)

diff --git a/UI/cmake/legacy.cmake b/UI/cmake/legacy.cmake
index 83b9493d4..518298508 100644
--- a/UI/cmake/legacy.cmake
+++ b/UI/cmake/legacy.cmake
@@ -481,6 +481,10 @@ elseif(OS_POSIX)
     target_link_libraries(obs PRIVATE procstat)
   endif()
 
+  if(OS_LINUX)
+    target_link_libraries(obs PRIVATE cap)
+  endif()
+
   if(OS_LINUX AND ENABLE_WHATSNEW)
     find_package(MbedTLS)
     find_package(nlohmann_json REQUIRED)
diff --git a/UI/cmake/os-linux.cmake b/UI/cmake/os-linux.cmake
index 0646f68b7..35174067e 100644
--- a/UI/cmake/os-linux.cmake
+++ b/UI/cmake/os-linux.cmake
@@ -1,6 +1,6 @@
 target_sources(obs-studio PRIVATE platform-x11.cpp)
 target_compile_definitions(obs-studio PRIVATE OBS_INSTALL_PREFIX="${OBS_INSTALL_PREFIX}")
-target_link_libraries(obs-studio PRIVATE Qt::GuiPrivate)
+target_link_libraries(obs-studio PRIVATE Qt::GuiPrivate cap)
 
 if(TARGET OBS::python)
   find_package(Python REQUIRED COMPONENTS Interpreter Development)
diff --git a/UI/window-basic-main.cpp b/UI/window-basic-main.cpp
index 943e8cac1..7e0d70db2 100644
--- a/UI/window-basic-main.cpp
+++ b/UI/window-basic-main.cpp
@@ -105,6 +105,11 @@
 #include <obs-nix-platform.h>
 #endif
 
+#ifdef __linux__
+#include <sys/capability.h>
+#include <sys/prctl.h>
+#endif
+
 using namespace std;
 
 #ifdef BROWSER_AVAILABLE
@@ -1987,6 +1992,24 @@ void OBSBasic::OBSInit()
 			throw UNKNOWN_ERROR;
 	}
 
+#ifdef __linux__
+	cap_t caps = cap_get_proc();
+
+	if (caps) {
+		cap_value_t capToRemove = CAP_SYS_NICE;
+
+		/* Drop CAP_SYS_NICE after EGL context has been created */
+		cap_set_flag(caps, CAP_EFFECTIVE, 1, &capToRemove, CAP_CLEAR);
+		cap_set_flag(caps, CAP_PERMITTED, 1, &capToRemove, CAP_CLEAR);
+
+		cap_set_proc(caps);
+		cap_free(caps);
+
+		/* Reset permissions of proc filesystem (for PipeWire) */
+		prctl(PR_SET_DUMPABLE, 1);
+	}
+#endif
+
 	/* load audio monitoring */
 	if (obs_audio_monitoring_available()) {
 		const char *device_name = config_get_string(
diff --git a/deps/glad/include/glad/glad_egl.h b/deps/glad/include/glad/glad_egl.h
index 0424e4862..145a33f96 100644
--- a/deps/glad/include/glad/glad_egl.h
+++ b/deps/glad/include/glad/glad_egl.h
@@ -1,6 +1,6 @@
 /*
 
-    EGL loader generated by glad 0.1.35 on Sat May 14 03:38:09 2022.
+    EGL loader generated by glad 0.1.35 on Tue Jul  5 22:05:59 2022.
 
     Language/Generator: C/C++
     Specification: egl
@@ -13,6 +13,7 @@
         EGL_EXT_platform_wayland,
         EGL_EXT_platform_x11,
         EGL_EXT_platform_xcb,
+        EGL_IMG_context_priority,
         EGL_KHR_create_context,
         EGL_KHR_image_base,
         EGL_KHR_image_pixmap,
@@ -25,9 +26,9 @@
     Reproducible: False
 
     Commandline:
-        --api="egl=1.5" --generator="c" --spec="egl" --extensions="EGL_EXT_image_dma_buf_import,EGL_EXT_image_dma_buf_import_modifiers,EGL_EXT_platform_base,EGL_EXT_platform_wayland,EGL_EXT_platform_x11,EGL_EXT_platform_xcb,EGL_KHR_create_context,EGL_KHR_image_base,EGL_KHR_image_pixmap,EGL_KHR_platform_wayland,EGL_KHR_platform_x11,EGL_MESA_image_dma_buf_export"
+        --api="egl=1.5" --generator="c" --spec="egl" --extensions="EGL_EXT_image_dma_buf_import,EGL_EXT_image_dma_buf_import_modifiers,EGL_EXT_platform_base,EGL_EXT_platform_wayland,EGL_EXT_platform_x11,EGL_EXT_platform_xcb,EGL_IMG_context_priority,EGL_KHR_create_context,EGL_KHR_image_base,EGL_KHR_image_pixmap,EGL_KHR_platform_wayland,EGL_KHR_platform_x11,EGL_MESA_image_dma_buf_export"
     Online:
-        https://glad.dav1d.de/#language=c&specification=egl&loader=on&api=egl%3D1.5&extensions=EGL_EXT_image_dma_buf_import&extensions=EGL_EXT_image_dma_buf_import_modifiers&extensions=EGL_EXT_platform_base&extensions=EGL_EXT_platform_wayland&extensions=EGL_EXT_platform_x11&extensions=EGL_EXT_platform_xcb&extensions=EGL_KHR_create_context&extensions=EGL_KHR_image_base&extensions=EGL_KHR_image_pixmap&extensions=EGL_KHR_platform_wayland&extensions=EGL_KHR_platform_x11&extensions=EGL_MESA_image_dma_buf_export
+        https://glad.dav1d.de/#language=c&specification=egl&loader=on&api=egl%3D1.5&extensions=EGL_EXT_image_dma_buf_import&extensions=EGL_EXT_image_dma_buf_import_modifiers&extensions=EGL_EXT_platform_base&extensions=EGL_EXT_platform_wayland&extensions=EGL_EXT_platform_x11&extensions=EGL_EXT_platform_xcb&extensions=EGL_IMG_context_priority&extensions=EGL_KHR_create_context&extensions=EGL_KHR_image_base&extensions=EGL_KHR_image_pixmap&extensions=EGL_KHR_platform_wayland&extensions=EGL_KHR_platform_x11&extensions=EGL_MESA_image_dma_buf_export
 */
 
 
@@ -381,6 +382,10 @@ EGLBoolean eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags);
 #define EGL_PLATFORM_X11_SCREEN_EXT 0x31D6
 #define EGL_PLATFORM_XCB_EXT 0x31DC
 #define EGL_PLATFORM_XCB_SCREEN_EXT 0x31DE
+#define EGL_CONTEXT_PRIORITY_LEVEL_IMG 0x3100
+#define EGL_CONTEXT_PRIORITY_HIGH_IMG 0x3101
+#define EGL_CONTEXT_PRIORITY_MEDIUM_IMG 0x3102
+#define EGL_CONTEXT_PRIORITY_LOW_IMG 0x3103
 #define EGL_CONTEXT_MAJOR_VERSION_KHR 0x3098
 #define EGL_CONTEXT_MINOR_VERSION_KHR 0x30FB
 #define EGL_CONTEXT_FLAGS_KHR 0x30FC
@@ -433,6 +438,9 @@ GLAPI PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC glad_eglCreatePlatformPixmapSurfa
 #ifndef EGL_EXT_platform_xcb
 #define EGL_EXT_platform_xcb 1
 #endif
+#ifndef EGL_IMG_context_priority
+#define EGL_IMG_context_priority 1
+#endif
 #ifndef EGL_KHR_create_context
 #define EGL_KHR_create_context 1
 #endif
diff --git a/deps/glad/src/glad_egl.c b/deps/glad/src/glad_egl.c
index bbf7aa305..d0a07226e 100644
--- a/deps/glad/src/glad_egl.c
+++ b/deps/glad/src/glad_egl.c
@@ -1,6 +1,6 @@
 /*
 
-    EGL loader generated by glad 0.1.35 on Sat May 14 03:38:09 2022.
+    EGL loader generated by glad 0.1.35 on Tue Jul  5 22:05:59 2022.
 
     Language/Generator: C/C++
     Specification: egl
@@ -13,6 +13,7 @@
         EGL_EXT_platform_wayland,
         EGL_EXT_platform_x11,
         EGL_EXT_platform_xcb,
+        EGL_IMG_context_priority,
         EGL_KHR_create_context,
         EGL_KHR_image_base,
         EGL_KHR_image_pixmap,
@@ -25,9 +26,9 @@
     Reproducible: False
 
     Commandline:
-        --api="egl=1.5" --generator="c" --spec="egl" --extensions="EGL_EXT_image_dma_buf_import,EGL_EXT_image_dma_buf_import_modifiers,EGL_EXT_platform_base,EGL_EXT_platform_wayland,EGL_EXT_platform_x11,EGL_EXT_platform_xcb,EGL_KHR_create_context,EGL_KHR_image_base,EGL_KHR_image_pixmap,EGL_KHR_platform_wayland,EGL_KHR_platform_x11,EGL_MESA_image_dma_buf_export"
+        --api="egl=1.5" --generator="c" --spec="egl" --extensions="EGL_EXT_image_dma_buf_import,EGL_EXT_image_dma_buf_import_modifiers,EGL_EXT_platform_base,EGL_EXT_platform_wayland,EGL_EXT_platform_x11,EGL_EXT_platform_xcb,EGL_IMG_context_priority,EGL_KHR_create_context,EGL_KHR_image_base,EGL_KHR_image_pixmap,EGL_KHR_platform_wayland,EGL_KHR_platform_x11,EGL_MESA_image_dma_buf_export"
     Online:
-        https://glad.dav1d.de/#language=c&specification=egl&loader=on&api=egl%3D1.5&extensions=EGL_EXT_image_dma_buf_import&extensions=EGL_EXT_image_dma_buf_import_modifiers&extensions=EGL_EXT_platform_base&extensions=EGL_EXT_platform_wayland&extensions=EGL_EXT_platform_x11&extensions=EGL_EXT_platform_xcb&extensions=EGL_KHR_create_context&extensions=EGL_KHR_image_base&extensions=EGL_KHR_image_pixmap&extensions=EGL_KHR_platform_wayland&extensions=EGL_KHR_platform_x11&extensions=EGL_MESA_image_dma_buf_export
+        https://glad.dav1d.de/#language=c&specification=egl&loader=on&api=egl%3D1.5&extensions=EGL_EXT_image_dma_buf_import&extensions=EGL_EXT_image_dma_buf_import_modifiers&extensions=EGL_EXT_platform_base&extensions=EGL_EXT_platform_wayland&extensions=EGL_EXT_platform_x11&extensions=EGL_EXT_platform_xcb&extensions=EGL_IMG_context_priority&extensions=EGL_KHR_create_context&extensions=EGL_KHR_image_base&extensions=EGL_KHR_image_pixmap&extensions=EGL_KHR_platform_wayland&extensions=EGL_KHR_platform_x11&extensions=EGL_MESA_image_dma_buf_export
 */
 
 #include <stdio.h>
diff --git a/libobs-opengl/gl-wayland-egl.c b/libobs-opengl/gl-wayland-egl.c
index bd7e14dad..751c2bc2f 100644
--- a/libobs-opengl/gl-wayland-egl.c
+++ b/libobs-opengl/gl-wayland-egl.c
@@ -65,6 +65,8 @@ static const EGLint ctx_attribs[] = {
 	3,
 	EGL_CONTEXT_MINOR_VERSION,
 	3,
+	EGL_CONTEXT_PRIORITY_LEVEL_IMG,
+	EGL_CONTEXT_PRIORITY_HIGH_IMG,
 	EGL_NONE};
 
 static const EGLint khr_ctx_attribs[] = {
@@ -78,6 +80,8 @@ static const EGLint khr_ctx_attribs[] = {
 	3,
 	EGL_CONTEXT_MINOR_VERSION_KHR,
 	3,
+	EGL_CONTEXT_PRIORITY_LEVEL_IMG,
+	EGL_CONTEXT_PRIORITY_HIGH_IMG,
 	EGL_NONE};
 
 struct gl_windowinfo {
@@ -227,6 +231,16 @@ static struct gl_platform *gl_wayland_egl_platform_create(gs_device_t *device,
 		goto fail_context_create;
 	}
 
+	EGLint priority = EGL_CONTEXT_PRIORITY_MEDIUM_IMG;
+	eglQueryContext(plat->display, plat->context,
+			EGL_CONTEXT_PRIORITY_LEVEL_IMG, &priority);
+
+	if (priority != EGL_CONTEXT_PRIORITY_HIGH_IMG) {
+		blog(LOG_WARNING, "Failed to set context priority");
+	} else {
+		blog(LOG_INFO, "Set context priority to EGL_CONTEXT_PRIORITY_HIGH_IMG");
+	}
+
 	if (!gladLoadGL()) {
 		blog(LOG_ERROR, "Failed to load OpenGL entry functions.");
 		goto fail_load_gl;
diff --git a/libobs-opengl/gl-x11-egl.c b/libobs-opengl/gl-x11-egl.c
index 56086a997..86cb13138 100644
--- a/libobs-opengl/gl-x11-egl.c
+++ b/libobs-opengl/gl-x11-egl.c
@@ -48,6 +48,8 @@ static const int ctx_attribs[] = {
 	3,
 	EGL_CONTEXT_MINOR_VERSION,
 	3,
+	EGL_CONTEXT_PRIORITY_LEVEL_IMG,
+	EGL_CONTEXT_PRIORITY_HIGH_IMG,
 	EGL_NONE,
 };
 
@@ -225,6 +227,16 @@ static bool gl_context_create(struct gl_platform *plat)
 		goto error;
 	}
 
+	EGLint priority = EGL_CONTEXT_PRIORITY_MEDIUM_IMG;
+	eglQueryContext(edisplay, context, EGL_CONTEXT_PRIORITY_LEVEL_IMG,
+			&priority);
+
+	if (priority != EGL_CONTEXT_PRIORITY_HIGH_IMG) {
+		blog(LOG_WARNING, "Failed to set context priority");
+	} else {
+		blog(LOG_INFO, "Set context priority to EGL_CONTEXT_PRIORITY_HIGH_IMG");
+	}
+
 	plat->pbuffer =
 		eglCreatePbufferSurface(edisplay, config, ctx_pbuffer_attribs);
 	if (EGL_NO_SURFACE == plat->pbuffer) {
-- 
2.42.0

