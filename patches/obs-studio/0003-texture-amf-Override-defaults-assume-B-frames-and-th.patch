From 9cc1f3dfae91965f96ead958f0b503c6775ba0cf Mon Sep 17 00:00:00 2001
From: Hannes Mann <hannesmann2000@gmail.com>
Date: Sun, 10 Sep 2023 04:50:20 +0200
Subject: [PATCH 3/3] texture-amf: Override defaults, assume B-frames and
 throughput

---
 plugins/obs-ffmpeg/CMakeLists.txt  |   3 +
 plugins/obs-ffmpeg/texture-amf.cpp | 153 ++++-------------------------
 2 files changed, 22 insertions(+), 134 deletions(-)

diff --git a/plugins/obs-ffmpeg/CMakeLists.txt b/plugins/obs-ffmpeg/CMakeLists.txt
index 61725b4e4..265bd7423 100644
--- a/plugins/obs-ffmpeg/CMakeLists.txt
+++ b/plugins/obs-ffmpeg/CMakeLists.txt
@@ -1,5 +1,8 @@
 cmake_minimum_required(VERSION 3.22...3.25)
 
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-nonnull")
+set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -Wno-nonnull")
+
 legacy_check()
 
 option(ENABLE_FFMPEG_LOGGING "Enables obs-ffmpeg logging" OFF)
diff --git a/plugins/obs-ffmpeg/texture-amf.cpp b/plugins/obs-ffmpeg/texture-amf.cpp
index fafb3e3d7..406d0d2ca 100644
--- a/plugins/obs-ffmpeg/texture-amf.cpp
+++ b/plugins/obs-ffmpeg/texture-amf.cpp
@@ -194,9 +194,6 @@ struct amf_base {
 	AMF_COLOR_PRIMARIES_ENUM amf_primaries;
 	AMF_SURFACE_FORMAT amf_format;
 
-	amf_int64 max_throughput = 0;
-	amf_int64 requested_throughput = 0;
-	amf_int64 throughput = 0;
 	int64_t dts_offset = 0;
 	uint32_t cx;
 	uint32_t cy;
@@ -204,7 +201,6 @@ struct amf_base {
 	int fps_num;
 	int fps_den;
 	bool full_range;
-	bool bframes_supported = false;
 	bool first_update = true;
 
 	inline amf_base(bool fallback) : fallback(fallback) {}
@@ -1120,18 +1116,6 @@ static inline GLuint get_read_fbo(amf_texencode *enc, gs_texture *tex)
 
 static constexpr amf_int64 macroblock_size = 16;
 
-static inline void calc_throughput(amf_base *enc)
-{
-	amf_int64 mb_cx =
-		((amf_int64)enc->cx + (macroblock_size - 1)) / macroblock_size;
-	amf_int64 mb_cy =
-		((amf_int64)enc->cy + (macroblock_size - 1)) / macroblock_size;
-	amf_int64 mb_frame = mb_cx * mb_cy;
-
-	enc->throughput =
-		mb_frame * (amf_int64)enc->fps_num / (amf_int64)enc->fps_den;
-}
-
 static inline int get_avc_preset(amf_base *enc, const char *preset);
 #if ENABLE_HEVC
 static inline int get_hevc_preset(amf_base *enc, const char *preset);
@@ -1154,64 +1138,6 @@ static inline int get_preset(amf_base *enc, const char *preset)
 	return 0;
 }
 
-static inline void refresh_throughput_caps(amf_base *enc, const char *&preset)
-{
-	AMF_RESULT res = AMF_OK;
-	AMFCapsPtr caps;
-
-	set_opt(QUALITY_PRESET, get_preset(enc, preset));
-	res = enc->amf_encoder->GetCaps(&caps);
-	if (res == AMF_OK) {
-		caps->GetProperty(get_opt_name(CAP_MAX_THROUGHPUT),
-				  &enc->max_throughput);
-		caps->GetProperty(get_opt_name(CAP_REQUESTED_THROUGHPUT),
-				  &enc->requested_throughput);
-	}
-}
-
-static inline void check_preset_compatibility(amf_base *enc,
-					      const char *&preset)
-{
-	/* The throughput depends on the current preset and the other static
-	 * encoder properties. If the throughput is lower than the max
-	 * throughput, switch to a lower preset. */
-
-	if (astrcmpi(preset, "highQuality") == 0) {
-		if (!enc->max_throughput) {
-			preset = "quality";
-			set_opt(QUALITY_PRESET, get_preset(enc, preset));
-		} else {
-			if (enc->max_throughput - enc->requested_throughput <
-			    enc->throughput) {
-				preset = "quality";
-				refresh_throughput_caps(enc, preset);
-			}
-		}
-	}
-
-	if (astrcmpi(preset, "quality") == 0) {
-		if (!enc->max_throughput) {
-			preset = "balanced";
-			set_opt(QUALITY_PRESET, get_preset(enc, preset));
-		} else {
-			if (enc->max_throughput - enc->requested_throughput <
-			    enc->throughput) {
-				preset = "balanced";
-				refresh_throughput_caps(enc, preset);
-			}
-		}
-	}
-
-	if (astrcmpi(preset, "balanced") == 0) {
-		if (enc->max_throughput &&
-		    enc->max_throughput - enc->requested_throughput <
-			    enc->throughput) {
-			preset = "speed";
-			refresh_throughput_caps(enc, preset);
-		}
-	}
-}
-
 static inline int64_t convert_to_amf_ts(amf_base *enc, int64_t ts)
 {
 	constexpr int64_t amf_timebase = AMF_SECOND;
@@ -1931,7 +1857,6 @@ try {
 	if (res != AMF_OK)
 		throw amf_error("CreateComponent failed", res);
 
-	calc_throughput(enc);
 	return true;
 
 } catch (const amf_error &err) {
@@ -2168,7 +2093,7 @@ static void amf_avc_update_data(amf_base *enc, int rc, int64_t bitrate,
 		set_avc_property(enc, VBV_BUFFER_SIZE, bitrate);
 
 		if (rc == AMF_VIDEO_ENCODER_RATE_CONTROL_METHOD_CBR) {
-			set_avc_property(enc, FILLER_DATA_ENABLE, true);
+			set_avc_property(enc, FILLER_DATA_ENABLE, false);
 		}
 	} else {
 		set_avc_property(enc, QP_I, qp);
@@ -2223,16 +2148,12 @@ static bool amf_avc_init(void *data, obs_data_t *settings)
 	const char *rc_str = obs_data_get_string(settings, "rate_control");
 	int64_t bf = obs_data_get_int(settings, "bf");
 
-	if (enc->bframes_supported) {
-		set_avc_property(enc, MAX_CONSECUTIVE_BPICTURES, 3);
-		set_avc_property(enc, B_PIC_PATTERN, bf);
-
-	} else if (bf != 0) {
-		warn("B-Frames set to %" PRId64 " but b-frames are not "
-		     "supported by this device",
-		     bf);
-		bf = 0;
-	}
+	set_avc_property(enc, MAX_CONSECUTIVE_BPICTURES, bf);
+	set_avc_property(enc, B_PIC_PATTERN, bf);
+	set_avc_property(enc, B_REFERENCE_ENABLE, true);
+	set_avc_property(enc, ADAPTIVE_MINIGOP, true);
+	set_avc_property(enc, RATE_CONTROL_SKIP_FRAME_ENABLE, false);
+	set_avc_property(enc, FILLER_DATA_ENABLE, false);
 
 	int rc = get_avc_rate_control(rc_str);
 
@@ -2257,8 +2178,6 @@ static bool amf_avc_init(void *data, obs_data_t *settings)
 
 	set_avc_property(enc, DE_BLOCKING_FILTER, true);
 
-	check_preset_compatibility(enc, preset);
-
 	const char *ffmpeg_opts = obs_data_get_string(settings, "ffmpeg_opts");
 	if (ffmpeg_opts && *ffmpeg_opts) {
 		struct obs_options opts = obs_parse_options(ffmpeg_opts);
@@ -2298,17 +2217,6 @@ static void amf_avc_create_internal(amf_base *enc, obs_data_t *settings)
 	if (!amf_create_encoder(enc))
 		throw "Failed to create encoder";
 
-	AMFCapsPtr caps;
-	res = enc->amf_encoder->GetCaps(&caps);
-	if (res == AMF_OK) {
-		caps->GetProperty(AMF_VIDEO_ENCODER_CAP_BFRAMES,
-				  &enc->bframes_supported);
-		caps->GetProperty(AMF_VIDEO_ENCODER_CAP_MAX_THROUGHPUT,
-				  &enc->max_throughput);
-		caps->GetProperty(AMF_VIDEO_ENCODER_CAP_REQUESTED_THROUGHPUT,
-				  &enc->requested_throughput);
-	}
-
 	const char *preset = obs_data_get_string(settings, "preset");
 
 	set_avc_property(enc, FRAMESIZE, AMFConstructSize(enc->cx, enc->cy));
@@ -2336,16 +2244,14 @@ static void amf_avc_create_internal(amf_base *enc, obs_data_t *settings)
 	if (res == AMF_OK && p.type == AMF_VARIANT_INTERFACE)
 		enc->header = AMFBufferPtr(p.pInterface);
 
-	if (enc->bframes_supported) {
-		amf_int64 b_frames = 0;
-		amf_int64 b_max = 0;
+	amf_int64 b_frames = 0;
+	amf_int64 b_max = 0;
 
-		if (get_avc_property(enc, B_PIC_PATTERN, &b_frames) &&
-		    get_avc_property(enc, MAX_CONSECUTIVE_BPICTURES, &b_max))
-			enc->dts_offset = b_frames + 1;
-		else
-			enc->dts_offset = 0;
-	}
+	if (get_avc_property(enc, B_PIC_PATTERN, &b_frames) &&
+		get_avc_property(enc, MAX_CONSECUTIVE_BPICTURES, &b_max))
+		enc->dts_offset = b_frames + 1;
+	else
+		enc->dts_offset = 0;
 }
 
 static void *amf_avc_create_texencode(obs_data_t *settings,
@@ -2506,7 +2412,7 @@ static void amf_hevc_update_data(amf_base *enc, int rc, int64_t bitrate,
 		set_hevc_property(enc, VBV_BUFFER_SIZE, bitrate);
 
 		if (rc == AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CBR) {
-			set_hevc_property(enc, FILLER_DATA_ENABLE, true);
+			set_hevc_property(enc, FILLER_DATA_ENABLE, false);
 		}
 	} else {
 		set_hevc_property(enc, QP_I, qp);
@@ -2569,14 +2475,15 @@ static bool amf_hevc_init(void *data, obs_data_t *settings)
 	set_hevc_property(enc, ENFORCE_HRD, true);
 	set_hevc_property(enc, HIGH_MOTION_QUALITY_BOOST_ENABLE, false);
 
+	set_hevc_property(enc, RATE_CONTROL_SKIP_FRAME_ENABLE, false);
+	set_hevc_property(enc, FILLER_DATA_ENABLE, false);
+
 	int keyint_sec = (int)obs_data_get_int(settings, "keyint_sec");
 	int gop_size = (keyint_sec) ? keyint_sec * enc->fps_num / enc->fps_den
 				    : 250;
 
 	set_hevc_property(enc, GOP_SIZE, gop_size);
 
-	check_preset_compatibility(enc, preset);
-
 	const char *ffmpeg_opts = obs_data_get_string(settings, "ffmpeg_opts");
 	if (ffmpeg_opts && *ffmpeg_opts) {
 		struct obs_options opts = obs_parse_options(ffmpeg_opts);
@@ -2639,16 +2546,6 @@ static void amf_hevc_create_internal(amf_base *enc, obs_data_t *settings)
 	if (!amf_create_encoder(enc))
 		throw "Failed to create encoder";
 
-	AMFCapsPtr caps;
-	res = enc->amf_encoder->GetCaps(&caps);
-	if (res == AMF_OK) {
-		caps->GetProperty(AMF_VIDEO_ENCODER_HEVC_CAP_MAX_THROUGHPUT,
-				  &enc->max_throughput);
-		caps->GetProperty(
-			AMF_VIDEO_ENCODER_HEVC_CAP_REQUESTED_THROUGHPUT,
-			&enc->requested_throughput);
-	}
-
 	const bool is10bit = enc->amf_format == AMF_SURFACE_P010;
 	const bool pq = is_pq(enc);
 	const bool hlg = is_hlg(enc);
@@ -2957,8 +2854,6 @@ static bool amf_av1_init(void *data, obs_data_t *settings)
 		obs_free_options(opts);
 	}
 
-	check_preset_compatibility(enc, preset);
-
 	if (!ffmpeg_opts || !*ffmpeg_opts)
 		ffmpeg_opts = "(none)";
 
@@ -2985,16 +2880,6 @@ static void amf_av1_create_internal(amf_base *enc, obs_data_t *settings)
 	if (!amf_create_encoder(enc))
 		throw "Failed to create encoder";
 
-	AMFCapsPtr caps;
-	AMF_RESULT res = enc->amf_encoder->GetCaps(&caps);
-	if (res == AMF_OK) {
-		caps->GetProperty(AMF_VIDEO_ENCODER_AV1_CAP_MAX_THROUGHPUT,
-				  &enc->max_throughput);
-		caps->GetProperty(
-			AMF_VIDEO_ENCODER_AV1_CAP_REQUESTED_THROUGHPUT,
-			&enc->requested_throughput);
-	}
-
 	const bool is10bit = enc->amf_format == AMF_SURFACE_P010;
 	const char *preset = obs_data_get_string(settings, "preset");
 
@@ -3017,7 +2902,7 @@ static void amf_av1_create_internal(amf_base *enc, obs_data_t *settings)
 
 	amf_av1_init(enc, settings);
 
-	res = enc->amf_encoder->Init(enc->amf_format, enc->cx, enc->cy);
+	AMF_RESULT res = enc->amf_encoder->Init(enc->amf_format, enc->cx, enc->cy);
 	if (res != AMF_OK)
 		throw amf_error("AMFComponent::Init failed", res);
 
-- 
2.42.0

